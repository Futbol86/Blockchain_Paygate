const mongoose = require('mongoose');
const {Schema} = mongoose;

const userSchema = new Schema({
    email: String,
    password: String,
    first_name: String,
    last_name: String,
    phone: String,
    gioi_tinh_id: Number,
    referral_id: String,
    upline_id: String,
    ref_code: String,
    parent_ref_code: String,
    parent_user_id: { type: Schema.Types.ObjectId, ref: 'users' },
    address: String,
    authy: Boolean,
    kyc: String,
    kyc_type: String,
    kyc_number: String,
    kyc_name : String,
    kyc_country: String,
    btc_address: String,
    btc_private_key: String,
    erc_address: String,
    erc_private_key: String,
    trx_address: String,
    trx_private_key: String,
    tomo_address: String,
    tomo_private_key: String,
    kdg_reward: Number,
    lucky_spin_daily: String,
    kyc_success: Boolean,
    is2FA: Boolean,
    google_authenticator_secrect_key: String,
    convert_kdg_reward_date: Date,
    isLock: Boolean,
    reason_lock: String,
    kdg_lock: Number,
    birth_day: Date,
    create_date: Date,
    lucky_spin_historys : [{type : mongoose.Types.ObjectId, ref : 'lucky_spin_historys'}],
    kyc_images : [{type : mongoose.Types.ObjectId, ref : 'kyc_images'}],
    user_codes : [{type : mongoose.Types.ObjectId, ref : 'user_codes'}],
    user_stakings : [{type : mongoose.Types.ObjectId, ref : 'user_stakings'}],
    user_stakings_length : Number,
    user_transactions : [{type : mongoose.Types.ObjectId, ref : 'user_transactions'}],
    child_user_id : [{type : mongoose.Types.ObjectId, ref : 'child_user_id'}],
    child_user_id_length : Number,
});

mongoose.model('users', userSchema);